# These are the necessary federation and connector directives you will be using
schema
  @link(
    url: "https://specs.apollo.dev/federation/v2.11"
    import: [
      "@extends"
      "@external"
      "@inaccessible"
      "@key"
      "@override"
      "@policy"
      "@provides"
      "@requires"
      "@shareable"
      "@tag"
      "FieldSet"
    ]
  )
  @link(
    url: "https://specs.apollo.dev/connect/v0.2"
    import: [
      "@connect"
      "@source"
      "JSONSelection"
      "HTTPHeaderMapping"
      "ConnectHTTP"
      "SourceHTTP"
    ]
  )
  # A @source directive defines a shared data source for multiple connectors.
  @source(
    name: "connect-v2"
    http: {
      baseURL: "https://connect.squareupstaging.com/v2"
      headers: [
        { name: "Accept", value: "application/json" }
        { name: "Authorization", from: "Authorization" }
      ]
    }
  ) {
  query: Query
}

"Represents a business that sells with Square."
type Merchant {
  "The Square-issued ID of the merchant."
  id: ID!

  "The name of the merchant's overall business."
  businessName: String

  "The country code associated with the merchant, in ISO 3166 two-letter format. For example, `US` or `JP`."
  country: String!

  "The code indicating the language preferences of the merchant, in BCP 47 format. For example, `en-US` or `fr-CA`."
  languageCode: String

  "The currency associated with the merchant, in ISO 4217 format. For example, the currency code for US dollars is `USD`."
  currency: String

  "The merchant's status."
  status: MerchantStatus

  "The ID of the main Location for this merchant."
  mainLocationId: ID @inaccessible

  "The time when the merchant was created, in RFC 3339 format."
  createdAt: String
}

"Status of the merchant"
enum MerchantStatus {
  "The merchant is active and can receive payments."
  ACTIVE

  "The merchant is inactive and cannot receive payments."
  INACTIVE
}

type Query {
  ignoreMe: ID
    @connect(http: { GET: "https://never" }, selection: "$")
    @inaccessible
    @shareable

  "Retrieves the Merchant object for the given merchant ID"
  merchant(
    "The ID of the merchant to retrieve. If the string \"me\" is supplied as the ID, then retrieve the merchant that is currently accessible to this call."
    id: ID!
  ): Merchant
    @connect(
      source: "connect-v2"
      entity: true
      http: { GET: "/merchants/{$args.id}" }
      selection: """
      $.merchant {
      id
      businessName: business_name
      country
      currency
      status
      mainLocationId: main_location_id
      createdAt: created_at
      languageCode: language_code
      }
      """
    )

  "Lists all merchants associated with the access token. Note that this typically returns a list with a single merchant."
  merchants: [Merchant!]!
    @connect(
      source: "connect-v2"
      http: { GET: "/merchants" }
      selection: """
      $.merchant {
        id
        businessName: business_name
        country
        languageCode: language_code
        currency
        status
        mainLocationId: main_location_id
        createdAt: created_at
      }
      """
    )
}