schema
  @link(
    url: "https://specs.apollo.dev/federation/v2.11"
    import: [
      "@extends"
      "@external"
      "@inaccessible"
      "@key"
      "@override"
      "@policy"
      "@provides"
      "@requires"
      "@shareable"
      "@tag"
      "FieldSet"
    ]
  )
  @link(
    url: "https://specs.apollo.dev/connect/v0.2"
    import: [
      "@connect"
      "@source"
      "JSONSelection"
      "HTTPHeaderMapping"
      "ConnectHTTP"
      "SourceHTTP"
    ]
  )
  @source(
    name: "connect-v2"
    http: {
      baseURL: "https://connect.squareupstaging.com/v2"
      headers: [
        { name: "Accept", value: "application/json" }
        { name: "Authorization", from: "Authorization" }
      ]
    }
  ) {
  query: Query
}

type Query {
  ignoreMe: ID
    @connect(http: { GET: "https://never" }, selection: "$")
    @inaccessible
    @shareable
}

type Money @shareable {
  amount: Int
  currency: String
}

enum DisputeReason {
  AMOUNT_DIFFERS
  CANCELLED
  DUPLICATE
  NO_KNOWLEDGE
  NOT_AS_DESCRIBED
  NOT_RECEIVED
  PAID_BY_OTHER_MEANS
  CUSTOMER_REQUESTS_CREDIT
  EMV_LIABILITY_SHIFT
}

enum DisputeState {
  INQUIRY_EVIDENCE_REQUIRED
  INQUIRY_PROCESSING
  INQUIRY_CLOSED
  EVIDENCE_REQUIRED
  PROCESSING
  WON
  LOST
  ACCEPTED
}

enum CardBrand {
  OTHER_BRAND
  VISA
  MASTERCARD
  AMERICAN_EXPRESS
  DISCOVER
  DISCOVER_DINERS
  JCB
  CHINA_UNIONPAY
  SQUARE_GIFT_CARD
  SQUARE_CAPITAL_CARD
  INTERAC
  EFTPOS
  FELICA
  EBT
}

extend type Payment @key(fields: "id", resolvable: false) {
  id: ID!
}

extend type Location @key(fields: "id", resolvable: false) {
  id: ID!
}

type DisputedPayment {
  """
  The ID of the payment being disputed.
  """
  paymentId: ID! @inaccessible

  """
  The payment that was disputed.
  """
  payment: Payment @connect(source: "connect-v2", http: { GET: "/payments/{$this.paymentId}" }, selection: "$.payment { id }")
}

type DisputeConnection {
  """
  A list of dispute objects.
  """
  nodes: [Dispute!]!

  """
  Pagination cursor for the next set of results.
  """
  cursor: String
}

type Dispute @key(fields: "id") {
  """
  The unique ID for this Dispute, generated by Square.
  """
  id: ID!

  """
  The disputed amount, which can be less than the total transaction amount.
  """
  amountMoney: Money

  """
  The reason why the cardholder initiated the dispute.
  """
  reason: DisputeReason

  """
  The current state of this dispute.
  """
  state: DisputeState

  """
  The deadline by which the seller must respond to the dispute.
  """
  dueAt: String

  """
  The payment challenged in this dispute.
  """
  disputedPayment: DisputedPayment

  """
  The card brand used in the disputed payment.
  """
  cardBrand: CardBrand

  """
  The timestamp when the dispute was created.
  """
  createdAt: String!

  """
  The timestamp when the dispute was last updated.
  """
  updatedAt: String!

  """
  The ID of the dispute in the card brand system.
  """
  brandDisputeId: String

  """
  The timestamp when the dispute was reported.
  """
  reportedAt: String

  """
  The current version of the Dispute.
  """
  version: Int!

  """
  The ID of the location where the dispute originated.
  """
  locationId: ID @inaccessible

  """
  The location where the dispute originated.
  """
  location: Location
  @connect(source: "connect-v2", http: { GET: "/locations/{$this.locationId}" }, selection: "$.location { id }")
}

extend type Query {
  """
  Returns details about a specific dispute.
  """
  dispute(
    """
    The ID of the dispute you want more details about.
    """
    id: ID!
  ): Dispute
  @connect(
    source: "connect-v2"
    entity: true
    http: { GET: "/disputes/{$args.id}" }
    selection: """
      $.dispute {
        id
        amountMoney: amount_money {
          amount
          currency
        }
        reason
        state
        dueAt: due_at
        disputedPayment: disputed_payment {
          paymentId: payment_id
        }
        cardBrand: card_brand
        createdAt: created_at
        updatedAt: updated_at
        brandDisputeId: brand_dispute_id
        reportedAt: reported_at
        version
        locationId: location_id
      }
    """
  )

  """
  Returns a list of disputes associated with a particular account.
  """
  disputes(
    """
    A pagination cursor returned by a previous call to this endpoint.
    """
    cursor: String

    """
    The dispute states used to filter the result.
    """
    states: [DisputeState!]

    """
    The ID of the location for which to return a list of disputes.
    """
    locationId: ID
  ): DisputeConnection!
  @connect(
    source: "connect-v2"
    http: {
      GET: "/disputes"
      queryParams: """
        cursor: $args.cursor
        states: $args.states
        location_id: $args.locationId
      """
    }
    selection: """
      nodes: disputes {
        id
        amountMoney: amount_money {
          amount
          currency
        }
        reason
        state
        dueAt: due_at
        disputedPayment: disputed_payment {
          paymentId: payment_id
        }
        cardBrand: card_brand
        createdAt: created_at
        updatedAt: updated_at
        brandDisputeId: brand_dispute_id
        reportedAt: reported_at
        version
        locationId: location_id
      }
      cursor
    """
  )
}
